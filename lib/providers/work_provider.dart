import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hive/hive.dart';
import '../controller/work_controller.dart';
import '../models/work.dart';
import 'user_provider.dart';

class WorkProvider extends StateNotifier<AsyncValue<List<Work>>> {

  final Ref ref;
  int page = 1;
  final int limit = 20;
  bool hasMore = true;

  // bool get hasMore => _hasMore;

  // C·ªù ƒë√°nh d·∫•u d·ªØ li·ªáu khi t·∫°o m·ªõi hay
  bool _isFirstLaunch = true;

  // WorkProvider(this.ref) : super([]);
  WorkProvider(this.ref) : super(const AsyncValue.loading()) {
    // Gi·ªØ provider s·ªëng ƒë·ªÉ tr√°nh kh·ªüi t·∫°o l·∫°i
    // ref.keepAlive();
    // _initialize();
    ref.onDispose(() {
      page = 1; // Reset khi provider b·ªã h·ªßy
      hasMore = true;
    });
  }

// Kh·ªüi t·∫°o ban ƒë·∫ßu
  Future<void> _initialize() async {
    final user = ref.read(userProvider);
    if (user != null && state is AsyncLoading) {
      // await fetchWorksPageOne();
    }
  }


  /// Load danh s√°ch Work t·ª´ backend theo user
  Future<void> fetchWorks() async {
    final user = ref.read(userProvider);
    if (user != null) {
      try {
        final works = await WorkController().loadWorkByUser(userId: user.id);
        // state = works.reversed.toList();
        // state = AsyncValue.data(works.reversed.toList());
        works.sort((a, b) => b.checkInTime.compareTo(a.checkInTime));
        // S·∫Øp x·∫øp gi·∫£m d·∫ßn
        state = AsyncValue.data(works);
      } catch (e) {
        print("Error loading work list: $e");
        // Optionally: state = [];
      }
    }
  }

  // /// Load trang ƒë·∫ßu ti√™n
  // Future<void> fetchWorksPageOne() async {
  //   final user = ref.read(userProvider);
  //   if (user != null) {
  //     try {
  //       state = const AsyncValue.loading();
  //       _currentPage = 1;
  //       final works = await WorkController().loadWorkByUser(userId: user.id);
  //       works.sort((a, b) => b.checkInTime.compareTo(a.checkInTime));
  //       _allWorks = works;
  //       final initialPage = _getPage(_currentPage);
  //       _hasMore = initialPage.length < _allWorks.length;
  //       state = AsyncValue.data(initialPage);
  //     } catch (e) {
  //       state = AsyncValue.error(e, StackTrace.current);
  //     }
  //   }
  // }
  //
  // /// Load th√™m trang ti·∫øp theo (g·ªçi khi scroll t·ªõi cu·ªëi danh s√°ch)
  // Future<void> loadMoreWorks() async {
  //   if (!_hasMore) return;
  //
  //   _currentPage += 1;
  //   final nextPage = _getPage(_currentPage);
  //   final currentList = state.value ?? [];
  //
  //   state = AsyncValue.data([...currentList, ...nextPage]);
  //   _hasMore = (currentList.length + nextPage.length) < _allWorks.length;
  // }
  //
  // /// H√†m chia trang t·ª´ danh s√°ch t·ªïng
  // List<Work> _getPage(int page) {
  //   final start = (page - 1) * _pageSize;
  //   final end = (_pageSize * page).clamp(0, _allWorks.length);
  //   return _allWorks.sublist(start, end);
  // }
  // Future<void> loadWorksByUserFirstPage({bool isRefresh = false}) async {
  //   try {
  //     final box = Hive.box<Work>('workCacheBox');
  //
  //     /// üëâ ∆Øu ti√™n hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ cache
  //     // final cached = box.values.toList();
  //     final cached = box.values.toList()
  //       ..sort((a, b) => b.checkInTime.compareTo(a.checkInTime)); // üëà S·∫Øp x·∫øp gi·∫£m d·∫ßn
  //
  //     if (cached.isNotEmpty && !isRefresh) {
  //       debugPrint('‚è≥ Loading from cache...');
  //       state = AsyncValue.data(cached);
  //       return; // ‚úÖ Kh√¥ng g·ªçi API n·ªØa
  //     }
  //
  //     // üëâ N·∫øu kh√¥ng c√≥ cache, G·ªåI API
  //   // / üëâ N·∫øu l√† l·∫ßn m·ªü app ƒë·∫ßu ti√™n, lu√¥n g·ªçi API
  //     if (_isFirstLaunch || isRefresh) {
  //       page = 1;
  //       hasMore = true;
  //       state = const AsyncValue.loading();
  //
  //
  //     }
  //
  //
  //     state = const AsyncValue.loading();
  //     final userId = ref.read(userProvider)!.id;
  //     final result = await WorkController().loadWorksByUserPagination(
  //         userId: userId, page: page, limit: limit);
  //     final newWorks = result['works'] as List<Work>;
  //     state = AsyncValue.data(newWorks);
  //     hasMore = newWorks.length == limit;
  //
  //     // üëâ GHI CACHE n·∫øu d·ªØ li·ªáu m·ªõi
  //     await box.clear();
  //     for (final work in newWorks) {
  //       if (!box.containsKey(work.id)) {
  //         await box.put(work.id, work);
  //       }
  //     }
  //
  //   } catch (e, stackTrace) {
  //     state = AsyncValue.error(e, stackTrace);
  //   }
  // }

  Future<void> loadWorksByUserFirstPage({bool isRefresh = false}) async {
    final box = Hive.box<Work>('workCacheBox');
    final userId = ref.read(userProvider)?.id;
    if (userId == null) return;

    try {
      // üëâ N·∫øu l√† l·∫ßn m·ªü app ƒë·∫ßu ti√™n, lu√¥n g·ªçi API
      if (_isFirstLaunch || isRefresh) {
        debugPrint('üîÅ Loading fresh data from API...');
        _isFirstLaunch = false;
        page = 1;
        hasMore = true;
        state = const AsyncValue.loading();

        final result = await WorkController().loadWorksByUserPagination(
          userId: userId,
          page: page,
          limit: limit,
        );
        final newWorks = result['works'] as List<Work>;
        newWorks.sort((a, b) => b.checkInTime.compareTo(a.checkInTime));

        state = AsyncValue.data(newWorks);
        hasMore = newWorks.length == limit;

        // Ghi cache
        await box.clear();
        for (final work in newWorks) {
          await box.put(work.id, work);
        }
      } else {
        // üëâ N·∫øu kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu (quay l·∫°i m√†n), d√πng cache
        final cached = box.values.toList()
          ..sort((a, b) => b.checkInTime.compareTo(a.checkInTime));

        debugPrint('üì¶ Loading from cache...');
        state = AsyncValue.data(cached);
      }
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> loadMoreWorks() async {

    if (!hasMore) return;
    final box = Hive.box<Work>('workCacheBox');
    try {
      page++;

      // üì¶ 1. ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ state
      final currentWorks = state.value ?? [];
      // üì¶ 2. ƒê·ªçc d·ªØ li·ªáu cache t·ª´ Hive (n·∫øu ƒë√£ t·ª´ng l∆∞u ƒë·ªß to√†n b·ªô)
      final start = (page - 1) * limit;
      final end = start + limit;
      final cachedWorks = box.values.toList();

      // üëâ 1. N·∫øu ƒë√£ ƒë·ªß d·ªØ li·ªáu trong Hive cache
      if (cachedWorks.length >= end) {
        final moreWorksFromCache = cachedWorks.sublist(start, end);
        state = AsyncValue.data([...currentWorks, ...moreWorksFromCache]);
        // hasMore = moreWorksFromCache.length == limit;
        return;
      }

      // üëâ 2. G·ªçi API n·∫øu kh√¥ng ƒë·ªß trong cache
      final userId = ref.read(userProvider)!.id;
      final result = await WorkController().loadWorksByUserPagination(
          userId: userId, page: page, limit: limit);
      final newWorks = result['works'] as List<Work>;

      // üëâ 3. Ghi d·ªØ li·ªáu m·ªõi v√†o Hive n·∫øu ch∆∞a c√≥
      for (final work in newWorks) {
        if (!box.containsKey(work.id)) {
          await box.put(work.id, work);
        }
      }

      // üëâ 4. C·∫≠p nh·∫≠t states

      state = AsyncValue.data([...state.value ?? [], ...newWorks]);
      hasMore = newWorks.length == limit;
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }
  void resetFirstLaunch() {
    _isFirstLaunch = true;
  }

  /// Th√™m m·ªôt work m·ªõi (v√≠ d·ª• sau khi check-in ho·∫∑c th√™m th·ªß c√¥ng)
  void addWork(Work work) {
    // state = [...state, work];
    if (state is AsyncData) {
      final updated = [work, ...state.value!];
      state = AsyncValue.data(updated);
    }
  }

// /// Xo√° m·ªôt work (n·∫øu b·∫°n c·∫ßn)
// void removeWork(String workId) {
//   state = state.where((w) => w.id != workId).toList();
// }
//
// /// C·∫≠p nh·∫≠t m·ªôt work (n·∫øu c√≥ edit)
// void updateWork(Work updatedWork) {
//   state = [
//     for (final w in state)
//       if (w.id == updatedWork.id) updatedWork else w
//   ];
// }
}

final workProvider = StateNotifierProvider<WorkProvider,
    AsyncValue<List<Work>>>((ref) => WorkProvider(ref),);

final resetWorkProviderFlagProvider = Provider<void>((ref) {
  ref.read(workProvider.notifier).resetFirstLaunch();
});