import 'package:daily_manage_user_app/providers/user_provider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hive/hive.dart';
import 'dart:io' as IO;
import 'package:socket_io_client/socket_io_client.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import '../controller/leave_controller.dart';
import '../models/leave.dart';
import '../services/sockets/leave_socket.dart';
import 'package:shared_preferences/shared_preferences.dart';
class LeaveProvider extends StateNotifier<AsyncValue<List<Leave>>> {
  final Ref ref;

  int page = 1;
  final int limit = 8;
  bool hasMore = true;

// C·∫¨P NH·∫¨T: L∆∞u tr·ªØ c√°c tham s·ªë l·ªçc
  int _filterYear = 2025;
  String _sortField = 'startDate';
  String _sortOrder = 'desc';
  String _status = 'all';

  // C·ªù ƒë√°nh d·∫•u d·ªØ li·ªáu khi t·∫°o m·ªõi hay
  bool _isFirstLaunch = true;
  IO.Socket? socket; // Th√™m bi·∫øn socket
  // LeaveProvider(this.ref) : super(const AsyncValue.loading());//====
  LeaveProvider(this.ref) : super(const AsyncValue.loading()) {
    _initSocket(); // Kh·ªüi t·∫°o socket khi provider ƒë∆∞·ª£c t·∫°o
    // loadLeaves(); // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    // loadLeavesByUserFirstPage(); // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  }
// Kh·ªüi t·∫°o socket v√† l·∫Øng nghe s·ª± ki·ªán
  void _initSocket() {
    LeaveSocket.listenUpdatedLeaveRequest((leaveData) {
    //   // print('Processing work_checkIn data: $workData');
    //   print('Processing leave_request_status_update data: $leaveData'); // Log to√†n b·ªô d·ªØ li·ªáu
      final updatedLeave = Leave.fromMap(leaveData);
    //   if (!mounted) return;  // Ki·ªÉm tra widget c√≤n t·ªìn t·∫°i kh√¥ng
    //   print('Processed leave_request_status_update: $updatedLeave'); // Log ƒë·ªëi t∆∞·ª£ng Work sau khi x·ª≠ l√Ω
      state.whenData((currentList) {
        final exists = currentList.any((w) => w.id == updatedLeave.id);
        if (exists) {
          debugPrint('Updating existing leave: ${updatedLeave.id}');
          updateLeaveItem(updatedLeave);
        } else {
          debugPrint('Adding new leave: ${updatedLeave.id}');
          addLeaveToTop(updatedLeave);
        }
      });
    });
  }
  // X·ª≠ l√Ω s·ª± ki·ªán leave_updated t·ª´ socket
  void _handleLeaveUpdated() async {
    debugPrint('üì° Socket: Leave updated event received, syncing with API...');
    final box = Hive.box<Leave>('leaveCacheBox');

    try {
      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
      final userId = ref.read(userProvider)!.id;
      final result = await LeaveController().loadFilterLeaves(
        userId: userId,
        page: 1, // L·∫•y trang ƒë·∫ßu ti√™n ƒë·ªÉ ƒë·ªìng b·ªô
        limit: limit,
        filterYear: _filterYear,
        sortField: _sortField,
        sortOrder: _sortOrder,
        status: _status,
      );

      final newLeaves = result['leaves'] as List<Leave>;
      final monthYearCounts = result['leavesByMonthYear'] as List<dynamic>;

      // C·∫≠p nh·∫≠t leavesByMonthYear
      leavesByMonthYear.clear();
      for (var item in monthYearCounts) {
        leavesByMonthYear[item['monthYear']] = item['count'];
      }

      // C·∫≠p nh·∫≠t cache (Hive)
      await box.clear(); // X√≥a cache c≈©
      for (final leave in newLeaves) {
        await box.put(leave.id, leave); // L∆∞u leave m·ªõi v√†o cache
      }

      // C·∫≠p nh·∫≠t state
      state = AsyncValue.data(newLeaves);
      hasMore = newLeaves.length == limit;

      debugPrint('‚úÖ Synced leaves from socket: ${newLeaves.length} leaves');
    } catch (e, stackTrace) {
      debugPrint('‚ùå Error syncing leaves from socket: $e');
      state = AsyncValue.error(e, stackTrace);
    }
  }
  // Future<void> loadLeavesByUserFirstPage({bool isRefresh = false}) async {
  //   try {
  //     if (isRefresh) {
  //       page = 1; // ƒê·∫∑t l·∫°i trang khi l√†m m·ªõi
  //     }
  //     state = const AsyncValue.loading();
  //     final userId = ref.read(userProvider)!.id;
  //     final newLeaves = await LeaveController().loadLeavesByUserPagination(
  //       userId: userId,
  //       page: page,
  //       limit: limit,
  //     );
  //     state = AsyncValue.data(newLeaves);
  //     hasMore = newLeaves.length == limit;
  //   } catch (e, stackTrace) {
  //     state = AsyncValue.error(e, stackTrace);
  //   }
  // }
  //
  // Future<void> loadMoreLeaves() async {
  //   if (!hasMore) return;
  //   try {
  //     page++;
  //     final userId = ref.read(userProvider)!.id;
  //     final newLeaves = await LeaveController().loadLeavesByUserPagination(
  //       userId: userId,
  //       page: page,
  //       limit: limit,
  //     );
  //     state = AsyncValue.data([...state.value ?? [], ...newLeaves]);
  //     hasMore = newLeaves.length == limit;
  //   } catch (e, stackTrace) {
  //     state = AsyncValue.error(e, stackTrace);
  //   }
  // }
  // C·∫•u tr√∫c c√≥ th√™m t·ªïng s·ªë l·ªãch ngh·ªâ trong th√°ng ƒë√≥.
  Map<String, int> leavesByMonthYear = {};
  Future<void> loadLeavesByUserFirstPage({
    bool isRefresh = false,

    int filterYear = 2025,
    // String yearField = 'startDate',
    String sortField = 'startDate',
    String sortOrder = 'desc',
    String status = 'all',
  }) async {
//L∆∞u shared choh b·ªô l·ªçc.
    final prefs = await SharedPreferences.getInstance(); // Kh·ªüi t·∫°o SharedPreferences
    // T·∫°o key duy nh·∫•t cho b·ªô l·ªçc hi·ªán t·∫°i
    final box = Hive.box<Leave>('leaveCacheBox');

    try {
      if ( _isFirstLaunch || isRefresh) {
        _isFirstLaunch = false;
        page = 1;
        hasMore = true; // Reset hasMore
        leavesByMonthYear.clear();
        state = const AsyncValue.loading();


        // C·∫¨P NH·∫¨T: L∆∞u c√°c tham s·ªë l·ªçc
        _filterYear = filterYear;
        _sortField = sortField;
        _sortOrder = sortOrder;
        _status = status;

// L∆∞u c√°c tham s·ªë l·ªçc v√†o SharedPreferences
        await prefs.setInt('filterYear', _filterYear);
        await prefs.setString('sortField', _sortField);
        await prefs.setString('sortOrder', _sortOrder);
        await prefs.setString('status', _status);


// X√≥a cache n·∫øu b·ªô l·ªçc thay ƒë·ªïi
        if (filterYear != _filterYear || sortField != _sortField || sortOrder != _sortOrder || status != _status) {
          await box.clear();
        }
        // N·∫øu cache r·ªóng ho·∫∑c l√† refresh, m·ªõi g·ªçi API


        // state = const AsyncValue.loading();

        final userId = ref.read(userProvider)!.id;

        // final result = await LeaveController().loadLeavesByUserPagination(
        //   userId: userId,
        //   page: page,
        //   limit: limit,
        // );

        final result = await LeaveController().loadFilterLeaves(
          userId: userId,
          page: page,
          limit: limit,
          filterYear: _filterYear, // C·∫¨P NH·∫¨T: S·ª≠ d·ª•ng gi√° tr·ªã ƒë√£ l∆∞u
          sortField: _sortField,
          sortOrder: _sortOrder,
          status: _status,
        );
        final newLeaves = result['leaves'] as List<Leave>;
        debugPrint('Number of leaves received: ${newLeaves.length}');
        newLeaves.forEach((leave) {
          debugPrint('Leave: ${leave.toJson()}'); // In chi ti·∫øt t·ª´ng ƒë·ªëi t∆∞·ª£ng
        });

        final monthYearCounts = result['leavesByMonthYear'] as List<dynamic>;
        for (var item in monthYearCounts) {
          leavesByMonthYear[item['monthYear']] = item['count'];
        }

        // ghi d·ªØ li·ªáu v√†o c·ª•c b·ªô.
        // üëâ L∆∞u v√†o Hive
        await box.clear();
        for (final leave in newLeaves) {
          await box.put(leave.id, leave);
        }


        // print('Leaves by month-year in provider: $leavesByMonthYear');
        state = AsyncValue.data(newLeaves);

        hasMore = newLeaves.length == limit;
      }
      else{
        // Kh√¥i ph·ª•c c√°c tham s·ªë l·ªçc t·ª´ SharedPreferences
        _filterYear = prefs.getInt('filterYear') ?? 2025;
        _sortField = prefs.getString('sortField') ?? 'startDate';
        _sortOrder = prefs.getString('sortOrder') ?? 'desc';
        _status = prefs.getString('status') ?? 'all';




        /// üëâ ∆Øu ti√™n hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ cache
        final cached = box.values.toList();
        debugPrint('‚è≥ Loading from cache...');
        state = AsyncValue.data(cached);

        // ƒê·∫£m b·∫£o hasMore ƒë∆∞·ª£c c·∫≠p nh·∫≠t d·ª±a tr√™n cache
        hasMore = cached.length == limit * page;

        return; // ‚úÖ Kh√¥ng g·ªçi API n·ªØa
      }

    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }

  Future<void> loadMoreLeaves() async {
    if (!hasMore) return;
    //
    final box = Hive.box<Leave>('leaveCacheBox');

    try {
      page++;

      // üì¶ 1. ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ state
      final currentLeaves = state.value ?? [];
      // üì¶ 2. ƒê·ªçc d·ªØ li·ªáu cache t·ª´ Hive (n·∫øu ƒë√£ t·ª´ng l∆∞u ƒë·ªß to√†n b·ªô)
      final cachedLeaves = box.values.toList();
      final start = (page - 1) * limit;
      final end = start + limit;
      // N·∫øu cache c√≥ ƒë·ªß d·ªØ li·ªáu cho trang ti·∫øp theo
      if (cachedLeaves.length >= end) {
        final moreLeavesFromCache = cachedLeaves.sublist(start, end);
        state = AsyncValue.data([...currentLeaves, ...moreLeavesFromCache]);
        return;
      }

      // üì° 3. N·∫øu cache kh√¥ng ƒë·ªß => g·ªçi API


      final userId = ref.read(userProvider)!.id;
      final result = await LeaveController().loadFilterLeaves(
        userId: userId,
        page: page,
        limit: limit,

// C·∫¨P NH·∫¨T: S·ª≠ d·ª•ng c√°c tham s·ªë l·ªçc ƒë√£ l∆∞u
        filterYear: _filterYear,
        sortField: _sortField,
        sortOrder: _sortOrder,
        status: _status,
      );
      final newLeaves = result['leaves'] as List<Leave>;
      final monthYearCounts = result['leavesByMonthYear'] as List<dynamic>;
      for (var item in monthYearCounts) {
        leavesByMonthYear[item['monthYear']] = item['count'];
      }

      // üëâ Th√™m v√†o Hive cache n·∫øu ch∆∞a c√≥
      for (final leave in newLeaves) {
        if (!box.containsKey(leave.id)) {
          await box.put(leave.id, leave);
        }
      }

      state = AsyncValue.data([...state.value ?? [], ...newLeaves]);
      hasMore = newLeaves.length == limit;
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }
  void resetFirstLaunch() {
    _isFirstLaunch = true;
  }
// H√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t isNew c·ªßa m·ªôt Leave c·ª• th·ªÉ
  void updateLeaveIsNew(String leaveId, bool isNew) {
    state.whenData((leaves) {
      final updatedLeaves = leaves.map((leave) {
        if (leave.id == leaveId) {
          return leave.copyWith(isNew: isNew); // C·∫≠p nh·∫≠t isNew
        }
        return leave;
      }).toList();
      state = AsyncValue.data(updatedLeaves); // C·∫≠p nh·∫≠t state
    });
  }

// H√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t leaveScreen c·ªßa m·ªôt Leave c·ª• th·ªÉ
// H√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t to√†n b·ªô th√¥ng tin c·ªßa m·ªôt Leave c·ª• th·ªÉ
  void updateLeaveLeaveRequest(Leave updatedLeave) {
    state.whenData((leaves) {
      final updatedLeaves = leaves.map((leave) {
        if (leave.id == updatedLeave.id) {
          return Leave(
            id: updatedLeave.id,
            startDate: updatedLeave.startDate,
            endDate: updatedLeave.endDate,
            dateCreated: updatedLeave.dateCreated,
            leaveType: updatedLeave.leaveType,
            leaveTimeType: updatedLeave.leaveTimeType,
            status: updatedLeave.status,
            reason: updatedLeave.reason,
            isNew: updatedLeave.isNew, userId: ref.read(userProvider)!.id,
          );
        }
        return leave;
      }).toList();
      state = AsyncValue.data(updatedLeaves); // C·∫≠p nh·∫≠t state v·ªõi danh s√°ch m·ªõi
    });
  }

  Future<void> loadLeaves() async {
    final user = ref.read(userProvider);
    if (user != null) {
      try {
        final leaves = await LeaveController().loadLeavesByUser(
          userId: user.id,
        );
        state = AsyncValue.data(leaves);
      } catch (e, st) {
        state = AsyncValue.error(e, st);
      }
    }
  }


// H√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω c·∫≠p nh·∫≠t t·ª´ socket
  Future<void> handleSocketLeaveUpdate(Map<String, dynamic> data) async {
    final box = Hive.box<Leave>('leaveCacheBox');
    final leaveId = data['leaveId'] as String?;
    if (leaveId == null) {
      debugPrint('‚ö†Ô∏è Socket update missing leaveId');
      return;
    }

    try {
      // T·∫°o Leave object t·ª´ d·ªØ li·ªáu socket
      final updatedLeave = Leave(
        id: leaveId,
        startDate: DateTime.parse(data['startDate'] as String),
        endDate: DateTime.parse(data['endDate'] as String),
        dateCreated: DateTime.parse(data['dateCreated'] as String? ?? DateTime.now().toIso8601String()),
        leaveType: data['leaveType'] as String,
        leaveTimeType: data['leaveTimeType'] as String,
        status: data['status'] as String,
        reason: data['reason'] as String,
        isNew: data['isNew'] as bool? ?? false,
        userId: data['userId'] as String,
      );

      // Ki·ªÉm tra xem leave c√≥ kh·ªõp v·ªõi b·ªô l·ªçc hi·ªán t·∫°i kh√¥ng
      final leaveYear = updatedLeave.startDate.year;
      final leaveStatus = updatedLeave.status.toLowerCase();
      if (_filterYear == leaveYear && (_status == 'all' || _status.toLowerCase() == leaveStatus)) {
        // C·∫≠p nh·∫≠t cache
        await box.put(leaveId, updatedLeave);

        // C·∫≠p nh·∫≠t state
        state.whenData((leaves) {
          final updatedLeaves = leaves.map((leave) {
            if (leave.id == leaveId) {
              return updatedLeave;
            }
            return leave;
          }).toList();

          // N·∫øu leave ch∆∞a c√≥ trong danh s√°ch, th√™m v√†o (n·∫øu ph√π h·ª£p v·ªõi b·ªô l·ªçc)
          if (!leaves.any((leave) => leave.id == leaveId)) {
            updatedLeaves.add(updatedLeave);
            // S·∫Øp x·∫øp l·∫°i danh s√°ch theo _sortField v√† _sortOrder
            updatedLeaves.sort((a, b) {
              final aValue = _sortField == 'startDate' ? a.startDate : a.dateCreated;
              final bValue = _sortField == 'startDate' ? b.startDate : b.dateCreated;
              return _sortOrder == 'desc' ? bValue.compareTo(aValue) : aValue.compareTo(bValue);
            });
          }

          state = AsyncValue.data(updatedLeaves);
        });

        // C·∫≠p nh·∫≠t leavesByMonthYear
        final key = '${updatedLeave.startDate.month.toString().padLeft(2, '0')}/${updatedLeave.startDate.year}';
        leavesByMonthYear[key] = (leavesByMonthYear[key] ?? 0) + (leavesByMonthYear.containsKey(key) ? 0 : 1);
        debugPrint('Updated leavesByMonthYear: $leavesByMonthYear');
      } else {
        debugPrint('Socket update ignored due to filter mismatch: year=$leaveYear, status=$leaveStatus');
      }
    } catch (e, stackTrace) {
      debugPrint('Error handling socket update: $e');
      state = AsyncValue.error(e, stackTrace);
    }
  }

//   Future<void> fetchLeavesByUserFirstPage({required String userId,
//     required void Function(List<Leave>) onFirstPageLoaded,
//     required void Function(List<Leave>) onMoreLeavesLoaded,
//   }) async {
//     bool isFirstPage = true;
//     int page = 1;
//     const int limit = 10;
//     while (true) {
//       try{
//         final List<Leave> pageLeaves = await LeaveController()
//             .loadLeavesByUserPagination(userId: userId, page: page,
//             limit: limit);
//
//
//         if (isFirstPage) {
//           onFirstPageLoaded(pageLeaves); // hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n ngay
//           isFirstPage = false;
//         } else {
//           onMoreLeavesLoaded(pageLeaves); // th√™m d·ªØ li·ªáu v√†o danh s√°ch hi·ªán t·∫°i
//         }
//
//         if (pageLeaves.length < limit) {
//           break; // h·∫øt trang
//         }
//         page++;
//       }catch(e){
//         print('L·ªói t·∫£i trang $page: $e');
//         break;
//       }
//
//     }
//
//   }
// // **S·ª¨A**: Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫£i th√™m trang
//   // Ghi ch√∫: Ph∆∞∆°ng th·ª©c n√†y cho ph√©p t·∫£i m·ªôt trang c·ª• th·ªÉ khi ng∆∞·ªùi d√πng cu·ªôn ho·∫∑c nh·∫•n n√∫t t·∫£i th√™m
//   Future<void> fetchMoreLeaves({
//     required String userId,
//     required int page,
//     required void Function(List<Leave>) onMoreLeavesLoaded,
//   }) async {
//     try {
//       const int limit = 10;
//       final List<Leave> pageLeaves = await LeaveController()
//           .loadLeavesByUserPagination(userId: userId, page: page, limit: limit);
//       onMoreLeavesLoaded(pageLeaves);
//     } catch (e) {
//       print('L·ªói t·∫£i trang $page: $e');
//     }
//   }

  /// Th√™m m·ªôt leave m·ªõi (v√≠ d·ª• sau khi check-in ho·∫∑c th√™m th·ªß c√¥ng)
  void addLeave(Leave newLeave) {
    if (state is AsyncData) {
      final updated = [newLeave, ...state.value!];
      state = AsyncValue.data(updated);
    }
  }



  // Reatime
  void updateLeaveItem(Leave updatedLeave) {
    state.whenData((leaves) {
      final index = leaves.indexWhere((w) => w.id == updatedLeave.id);
      if (index != -1) {
        final newList = [...leaves];
        newList[index] = updatedLeave;
        state = AsyncValue.data(newList);
      }
    });
  }
//H√†m ƒë·ªÉ th√™m m·ªõi d·ªØ li·ªáu c·ªßa 1 ƒë·ªëi t∆∞·ª£ng realtime

  void addLeaveToTop(Leave newLeave) {
    state.whenData((currentList) {
      final exists = currentList.any((w) => w.id == newLeave.id);
      if (!exists) {
        state = AsyncValue.data([newLeave, ...currentList]);
      }
    });
  }


  Map<String, List<Leave>> get groupedByMonthYear {
    if (state is! AsyncData) return {};
    final leaves = state.value!;
    final Map<String, List<Leave>> grouped = {};
    for (var leave in leaves) {
      final key =
          '${leave.dateCreated.month.toString().padLeft(2, '0')}-${leave
          .dateCreated.year}';
      grouped.putIfAbsent(key, () => []);
      grouped[key]!.add(leave);
    }
    return grouped;
  }
}

// final leaveProvider = StateNotifierProvider<LeaveProvider, List<Leave>>((ref) => LeaveProvider(ref),);
final leaveProvider =
StateNotifierProvider<LeaveProvider, AsyncValue<List<Leave>>>(
      (ref) => LeaveProvider(ref),
);
final resetLeaveProviderFlagProvider = Provider<void>((ref) {
  ref.read(leaveProvider.notifier).resetFirstLaunch();
});